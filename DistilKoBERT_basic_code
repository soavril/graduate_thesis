{"cells":[{"cell_type":"markdown","source":["# **포탈 뉴스 댓글 클린봇의 통계적 학습**\n","\n","서울대학교 자유전공학부 2016-12214 최동혁\n","\n","졸업 논문에 사용된 DistilKoBERT 코드입니다."],"metadata":{"id":"PsknGRkf0Wav"}},{"cell_type":"markdown","source":["해당 코드는\n","1. https://github.com/monologg/DistilKoBERT\n","\n","2. https://github.com/SKTBrain/KoBERT\n","\n","를 참고하여 만들어졌음을 밝힙니다."],"metadata":{"id":"Hx1hI01sz0aH"}},{"cell_type":"markdown","source":["#Basic setting"],"metadata":{"id":"RKg8SBd612CB"}},{"cell_type":"code","source":["cd /content/drive/MyDrive/graduation_thesis/graduation_thesis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qh3kiqGyo7XR","executionInfo":{"status":"ok","timestamp":1673673493979,"user_tz":-540,"elapsed":2,"user":{"displayName":"최동혁","userId":"01129753520178660888"}},"outputId":"ebfbd748-2127-45df-b297-ce3cd11e99a9"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/graduation_thesis/graduation_thesis\n"]}]},{"cell_type":"code","source":["!git clone https://soavril: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@github.com/soavril/graduation_thesis.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IfadpRKktAqw","executionInfo":{"status":"ok","timestamp":1673673375536,"user_tz":-540,"elapsed":997,"user":{"displayName":"최동혁","userId":"01129753520178660888"}},"outputId":"7d8a0a3e-a648-4cfb-bae4-3bef5f113552"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'graduation_thesis'...\n","remote: Enumerating objects: 3, done.\u001b[K\n","remote: Counting objects: 100% (3/3), done.\u001b[K\n","remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\u001b[K\n","Unpacking objects: 100% (3/3), done.\n"]}]},{"cell_type":"code","source":["!git add "],"metadata":{"id":"Zm16s_XErrXN","executionInfo":{"status":"ok","timestamp":1673673496500,"user_tz":-540,"elapsed":433,"user":{"displayName":"최동혁","userId":"01129753520178660888"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YCxSuvnDSdfS"},"outputs":[],"source":["!pip install git+https://git@github.com/SKTBrain/KoBERT.git@master"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BEaZoGObsS-4"},"outputs":[],"source":["!pip install kobert-transformers"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pJMehA-Hiqxu"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"W3qJR9DkSuM8"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from tqdm.notebook import tqdm\n","\n","from mxnet.gluon import nn\n","from mxnet import gluon\n","import mxnet as mx\n","import gluonnlp as nlp\n","from tqdm import tqdm, tqdm_notebook\n","\n","import torch\n","from torch import nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","\n","from transformers import BertModel, DistilBertModel\n","from kobert_transformers import get_kobert_model, get_distilkobert_model\n","from kobert_transformers import get_tokenizer\n","\n","from kobert import get_tokenizer\n","from kobert.pytorch_kobert import get_pytorch_kobert_model\n","\n","from transformers import AdamW\n","from transformers.optimization import get_cosine_schedule_with_warmup"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"0j9vSnFdTBgA"},"outputs":[],"source":["device = torch.device(\"cuda:0\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"k86THcf2kFC_"},"outputs":[],"source":["#DistilKoBERT 모델 로드\n","distilbert_model = DistilBertModel.from_pretrained('monologg/distilkobert')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"g9HN2Y-MsfRt"},"outputs":[],"source":["#kobert model의 vocab set은 불러오지만 model은 사용하지 않습니다.\n","no_use, vocab = get_pytorch_kobert_model()"]},{"cell_type":"markdown","metadata":{"id":"LCGLGTPfkfrq"},"source":["# DataSet"]},{"cell_type":"markdown","source":["max_len는 네이버 댓글 길이 제한인 300자로 정해줍니다. batch_size는 16, epochs는 3으로 지정하며 나머지 변수도 동일하게 진행합니다. "],"metadata":{"id":"feXuMdv13hfg"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ccVc1qNrlqiO"},"outputs":[],"source":["max_len = 300\n","batch_size = 16\n","warmup_ratio = 0.1\n","num_epochs = 3\n","max_grad_norm = 1\n","log_interval = 200\n","learning_rate =  5e-5"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"dSV8KbI_dW-J"},"outputs":[],"source":["#데이터셋 로드\n","dataset_train = nlp.data.TSVDataset('/content/drive/MyDrive/train_data_2.2.tsv', field_indices=[0,1], num_discard_samples=1)\n","dataset_test = nlp.data.TSVDataset('/content/drive/MyDrive/test_data_2.2.tsv', field_indices=[0,1], num_discard_samples=1)"]},{"cell_type":"markdown","source":["모델의 입력 데이터로 들어가기 위해 BERTSentenceTransform를 이용해 토큰화, 인코딩, 패딩을 하는 클래스를 생성합니다."],"metadata":{"id":"85Mpf_FL2tpx"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"g4lg2ERelpFY"},"outputs":[],"source":["class BERTDataset(mx.gluon.data.Dataset):\n","    def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer, max_len,\n","                 pad, pair):\n","        transform = nlp.data.BERTSentenceTransform(\n","            bert_tokenizer, max_seq_length=max_len, pad=pad, pair=pair)\n","        sent_dataset = gluon.data.SimpleDataset([[\n","            i[sent_idx],\n","        ] for i in dataset])\n","        self.sentences = sent_dataset.transform(transform)\n","        self.labels = gluon.data.SimpleDataset(\n","            [np.array(np.int32(i[label_idx])) for i in dataset])\n","\n","    def __getitem__(self, i):\n","        return (self.sentences[i] + (self.labels[i], ))\n","\n","    def __len__(self):\n","        return (len(self.labels))"]},{"cell_type":"markdown","source":["토크나이저를 정의하고 앞서 정의한 클래스를 이용해 토큰화와 패딩을 진행해준다.\n","\n","그러면 1. padding sequence 2. length와 type 3. attention mask sequence 로 데이터가 생성된다."],"metadata":{"id":"xa-RRoGF32BW"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"hwyrQS7olvGj"},"outputs":[],"source":["tokenizer = get_tokenizer()\n","tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)\n","\n","data_train = BERTDataset(dataset_train, 0, 1, tok, max_len, True, False)\n","data_test = BERTDataset(dataset_test, 0, 1, tok, max_len, True, False)"]},{"cell_type":"markdown","source":["torch 형태로 데이터를 바꾸고 batch size와 최대로 사용가능한 cpu 갯수를 설정한다."],"metadata":{"id":"ih4EDzu-4eua"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"maAo0iHqMOIm"},"outputs":[],"source":["train_dataloader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, num_workers=2)\n","test_dataloader = torch.utils.data.DataLoader(data_test, batch_size=batch_size, num_workers=2)"]},{"cell_type":"markdown","source":["#Model"],"metadata":{"id":"DGgCll1F5E_G"}},{"cell_type":"markdown","source":["DistilKoBERT를 바탕으로하여 이진분류 모델을 만들어줍니다.\n","\n","num_classes를 2로 설정하여 0과 1로 분류하는 이진분류 모델을 만듭니다.\n","\n","**DistilBert는 기존의 Bert와 달리 token-type embedding을 사용하지 않습니다.**\n","\n","그래서 Transformers 라이브러리의 DistilBertModel을 사용할 때 기존 BertModel 과 달리 token_type_ids를 넣을 필요가 없습니다.\n","\n","이를 반영하여 클래스를 수정하여 제작하였습니다. "],"metadata":{"id":"KyYfVsEU5IUG"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7ufj1WJyMYU4"},"outputs":[],"source":["class distilBERTClassifier(nn.Module):\n","    def __init__(self,\n","                 bert,\n","                 hidden_size = 768,\n","                 num_classes= 2\n","                 dr_rate=None,\n","                 params=None):\n","        super(distilBERTClassifier, self).__init__()\n","        self.bert = bert\n","        self.dr_rate = dr_rate\n","        self.classifier = nn.Linear(hidden_size , num_classes)\n","        if dr_rate:\n","            self.dropout = nn.Dropout(p=dr_rate)\n","\n","    def forward(self, token_ids, valid_length, segment_ids = None):\n","      \n","        attention_mask = torch.zeros_like(token_ids)\n","        for i, v in enumerate(valid_length):\n","            attention_mask[i][:v] = 1\n","        \n","        output = self.bert(input_ids = token_ids, attention_mask = attention_mask.float().to(token_ids.device))\n","        hidden_state = output[0]\n","        output = hidden_state[:, 0]\n","        output = self.dropout(output)\n","        output = self.classifier(output)\n","\n","        return output"]},{"cell_type":"markdown","source":["dr_rate와 gpu를 설정한 해당 DistilKoBERT model을 최종적으로 사용합니다."],"metadata":{"id":"Gn2Suy-p7fAj"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5SSV8i4qMbdF"},"outputs":[],"source":["model = distilBERTClassifier(distilbert_model, dr_rate=0.5).to(device) "]},{"cell_type":"markdown","source":["optimzer와 schduler을 준비합니다. "],"metadata":{"id":"54bkQKZQ7WyS"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"LAyOw2bbMvNC"},"outputs":[],"source":["# Prepare optimizer and schedule (linear warmup and decay)\n","no_decay = ['bias', 'LayerNorm.weight']\n","optimizer_grouped_parameters = [\n","    {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},\n","    {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n","]\n","\n","optimizer = AdamW(optimizer_grouped_parameters, lr=learning_rate)\n","loss_fn = nn.CrossEntropyLoss()\n","\n","t_total = len(train_dataloader) * num_epochs\n","warmup_step = int(t_total * warmup_ratio)\n","\n","scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps=warmup_step, num_training_steps=t_total)"]},{"cell_type":"markdown","source":["accuracy 함수를 만들어줍니다."],"metadata":{"id":"awsegR_77u2P"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"CD2uBGRSOfVj"},"outputs":[],"source":["def calc_accuracy(X,Y):\n","    max_vals, max_indices = torch.max(X, 1)\n","    train_acc = (max_indices == Y).sum().data.cpu().numpy()/max_indices.size()[0]\n","    return train_acc"]},{"cell_type":"markdown","source":["#Training & Result"],"metadata":{"id":"BEbSgupK70gg"}},{"cell_type":"markdown","source":["train data를 통해서 model을 학습시키고 학습된 model로 test data에서 result를 도출합니다.\n","\n","해당 result를 기존의 test data와 비교하기 위해 다시 0과 1로 구성된 csv 파일로 만들어 저장합니다.\n","\n","(confusion matrix 및 각종 score 도출은 다른 환경에서 진행 했습니다.)"],"metadata":{"id":"qFBTMQPE76Jy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"AaeEYOUoObiR"},"outputs":[],"source":["for e in range(num_epochs):\n","    train_acc = 0.0\n","    test_acc = 0.0\n","    model.train()\n","    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(train_dataloader)):\n","        optimizer.zero_grad()\n","        token_ids = token_ids.long().to(device)\n","        segment_ids = segment_ids.long().to(device)\n","        valid_length = valid_length.to(device)\n","        label = label.long().to(device)\n","        out = model(token_ids, valid_length)\n","        loss = loss_fn(out, label)\n","        loss.backward()\n","        torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)\n","        optimizer.step()\n","        scheduler.step()  # Update learning rate schedule\n","        train_acc += calc_accuracy(out, label)\n","        if batch_id % log_interval == 0:\n","            print(\"epoch {} batch id {} loss {} train acc {}\".format(e+1, batch_id+1, loss.data.cpu().numpy(), train_acc / (batch_id+1)))\n","    print(\"epoch {} train acc {}\".format(e+1, train_acc / (batch_id+1)))\n","    with torch.no_grad():\n","      model.eval()\n","      output = []\n","      for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_dataloader)):\n","          token_ids = token_ids.long().to(device)\n","          segment_ids = segment_ids.long().to(device)\n","          valid_length = valid_length.to(device)\n","          label = label.long().to(device)\n","          out = model(token_ids, valid_length)\n","          test_acc += calc_accuracy(out, label)\n","          for i in out:\n","            logits=i\n","            logits = logits.detach().cpu().numpy()\n","            output.append(logits)\n","      print(\"epoch {} test acc {}\".format(e+1, test_acc / (batch_id+1)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ijeIZyfUmZ62"},"outputs":[],"source":["result = np.argmax(output, axis=1)\n","result_data = pd.DataFrame(result)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uxU2h6EgzRAK"},"outputs":[],"source":["result_data.to_csv('/content/drive/MyDrive/result_1.4.csv', encoding = 'utf-8', header = False)"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1_7kivUQh2yxWqXpQeJMo2Uz7u-8HS2yv","timestamp":1667649372861},{"file_id":"1NeA0ERql6MEmQ4txk8q5Nopyju5BsS3n","timestamp":1666842070067}],"mount_file_id":"1xlum8SEU5eZxL3bt4yi8pUPL03xFc8yQ","authorship_tag":"ABX9TyOr65ROTj12w9o0lsgfIUSu"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}